# Datasource configuration
spring.datasource.url= jdbc:${POSTGRESQL_CONNECTIONSTR_DB_URL:postgresql://localhost:5432/postgres}
spring.datasource.username=${DB_USER:postgres}
spring.datasource.password=${DB_PASS:postgres}
# Hibernate behaviour
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=${HIBERNATE_DDL:create}
# Enable logging of SQL
spring.jpa.show-sql=true
# Enable seeding. Doesn't use schema.sql but relies on Hibernate to create the schema.
spring.sql.init.platform= postgres
spring.jpa.defer-datasource-initialization= true
spring.sql.init.mode=${DB_SEED:always}

# Spring profile
spring.profiles.active=${SPRING_PROFILE:dev}

## logging
logging.level.org.springframework.security=INFO
logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n

## keycloak
spring.security.oauth2.client.provider.external.issuer-uri=http://localhost:8081/realms/External
spring.security.oauth2.client.registration.external.provider=external
spring.security.oauth2.client.registration.external.client-name=external-client
spring.security.oauth2.client.registration.external.client-id=external-client
spring.security.oauth2.client.registration.external.client-secret=VcZc71xwrTUNcePPJOXVEqj83Nm3imgO
spring.security.oauth2.client.registration.external.scope=openid,offline_access,profile
spring.security.oauth2.client.registration.external.authorization-grant-type=authorization_code